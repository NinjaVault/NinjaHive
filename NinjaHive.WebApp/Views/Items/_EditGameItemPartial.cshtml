@using NinjaHive.WebApp.Controllers
@using NinjaHive.WebApp.Helpers
@model NinjaHive.WebApp.Models.GameItemViewModel

@Html.HiddenFor(m => m.GameItem.Id)

<div class="col-md-6">

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Name, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.GameItem.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.CategoryId, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.DropDownList("_mainCategorySelect", Model.MainCategories, new { @class = "form-control", onChange = "ninjaHive.swapSubCategories(this)", id="gameItemMainCategorySelect" })
            @Html.DropDownListFor(m => m.GameItem.CategoryId, Model.Categories, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Value, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.GameItem.Value, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Value, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Description, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextAreaFor(m => m.GameItem.Description, 4, 0, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Description, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="col-md-6">
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsUpgrader)
        @Html.LabelFor(m => m.GameItem.IsUpgrader, new { @class = "control-label" })
    </div>
    <br/>
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsCrafter)
        @Html.LabelFor(m => m.GameItem.IsCrafter, new { @class = "control-label" })
    </div>
    <br />
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.Craftable)
        @Html.LabelFor(m => m.GameItem.Craftable, new { @class = "control-label" })
    </div>
    <br />
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsQuestItem)
        @Html.LabelFor(m => m.GameItem.IsQuestItem, new { @class = "control-label" })
    </div>
</div>


@{var subCategoryRequest = UrlProvider<ItemsController>.GetUrl(c => c.GetSubCategoriesJson(null));
var parentCategoryRequest = UrlProvider<ItemsController>.GetUrl(c => c.GetMainCategoriesJson(null));

bool hasCategory = Model.GameItem.SubCategoryName != null;}

<script src="~/Scripts/NinjaHive/NinjaHive_EditGameItemScripts.js"></script>
<script>
    ninjaHive.requestUrl.subCategories = "@subCategoryRequest";
    ninjaHive.requestUrl.mainCategories = "@parentCategoryRequest";

    if(@hasCategory.ToString().ToLower())
        ninjaHive.setMainCategory(document.getElementById("gameItemMainCategorySelect"), "@Model.GameItem.SubCategoryMainCategoryName", "@Model.GameItem.SubCategoryName");
</script>