@using NinjaHive.WebApp.Controllers
@using NinjaHive.WebApp.Helpers
@model NinjaHive.WebApp.Models.GameItemViewModel

@Html.HiddenFor(m => m.GameItem.Id)

<div class="col-md-6">

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Name, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.GameItem.Name, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.CategoryId, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.DropDownList("_mainCategorySelect", Model.MainCategories, new { @class = "form-control", onChange = "swapSubCategories(this)", id="gameItemMainCategorySelect" })
            @Html.DropDownListFor(m => m.GameItem.CategoryId, Model.Categories, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.CategoryId, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Value, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextBoxFor(m => m.GameItem.Value, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Value, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.GameItem.Description, new { @class = "col-md-4 control-label" })
        <div class="col-md-8">
            @Html.TextAreaFor(m => m.GameItem.Description, 4, 0, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.GameItem.Description, "", new { @class = "text-danger" })
        </div>
    </div>
</div>
<div class="col-md-6">
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsUpgrader)
        @Html.LabelFor(m => m.GameItem.IsUpgrader, new { @class = "control-label" })
    </div>
    <br/>
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsCrafter)
        @Html.LabelFor(m => m.GameItem.IsCrafter, new { @class = "control-label" })
    </div>
    <br />
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.Craftable)
        @Html.LabelFor(m => m.GameItem.Craftable, new { @class = "control-label" })
    </div>
    <br />
    <div class="form-group">
        @Html.CheckBoxFor(m => m.GameItem.IsQuestItem)
        @Html.LabelFor(m => m.GameItem.IsQuestItem, new { @class = "control-label" })
    </div>
</div>


@{var subCategoryRequest = UrlProvider<ItemsController>.GetUrl(c => c.GetSubCategories(Guid.Empty));
var parentCategoryRequest = UrlProvider<ItemsController>.GetUrl(c => c.GetMainCategory(""));

bool hasCategory = Model.GameItem.SubCategoryName != null;}

<script>
    function swapSubCategories(main, subCategories)
    {
        var form = main.form;
        var subSelect = form["GameItem.CategoryId"];
        
        changeSelectOptions(subSelect, subCategories || []);
        if(!subCategories)
        {
            var ajax = new XMLHttpRequest();
            var requestUrl = "@subCategoryRequest"
            ajax.open("GET", requestUrl.substring(0, requestUrl.indexOf('?parent=')+8)+main.value, true);

            ajax.onreadystatechange = function()
            {
                if(ajax.readyState == 4)
                {
                    if(ajax.status == 200)
                    {
                        changeSelectOptions(subSelect, JSON.parse(ajax.responseText));
                    }
                    else
                    {
                        console.log(ajax.responseText);
                    }
                }
            }
            ajax.send();
        }
    }
    function changeSelectOptions(select, options, defaultName)
    {
        // Clear the sub-categories drop-down
        while (select.firstChild)
            select.removeChild(select.firstChild);


        if(options.length == 0)
        {
            options.push({Id:"@Guid.Empty", Name:"Loading"});
        }
        var defaultIndex = 0;
        for(var i=0;i<options.length; ++i)
        {
            var option = document.createElement("option");
            option.value = options[i].Id;
            option.innerHTML = options[i].Name;
            if(options[i].Name == defaultName)
                defaultIndex = i;
            select.appendChild(option);
        }
        select.options[defaultIndex].selected = true;
    }

    function setMainCategory(mainSelect, categoryLabel, subCategoryLabel)
    {
        var ajax = new XMLHttpRequest();
        var requestUrl = "@parentCategoryRequest";
        ajax.open("GET", requestUrl + "?main=" + categoryLabel, true);

        ajax.onreadystatechange = function()
        {
            if(ajax.readyState == 4)
            {
                if(ajax.status == 200)
                {
                    var category = JSON.parse(ajax.responseText);
                    selectOptionWithLabel(mainSelect, categoryLabel);
                    changeSelectOptions(mainSelect.form["GameItem.CategoryId"],category.SubCategories,subCategoryLabel);
                }
                else
                {
                    console.log(ajax.responseText);
                }
            }
        }
        ajax.send();
    }
    function selectOptionWithLabel(select, optionLabel)
    {
        var options = select.getElementsByTagName("option");
        for(var i=0;i<options.length;++i)
        {
            if(options[i].innerHTML.indexOf(optionLabel) >= 0)
            {
                options[i].selected = true;
                return true;
            }
        }
        return false;
    }

    if(@hasCategory.ToString().ToLower())
        setMainCategory(document.getElementById("gameItemMainCategorySelect"), "@Model.GameItem.SubCategoryMainCategoryName", "@Model.GameItem.SubCategoryName");
</script>